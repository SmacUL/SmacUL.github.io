(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{232:function(t,a,s){"use strict";s.r(a);var n=s(0),v=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"数据管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据管理"}},[t._v("#")]),t._v(" 数据管理")]),t._v(" "),s("p",[t._v("这一部分简单的讨论一下 Java 的数据类型和数据存储的问题.")]),t._v(" "),s("h2",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),s("p",[t._v("Java 中的数据类型和 JS 中的比较相似, 包括了"),s("strong",[t._v("基本类型")]),t._v("和"),s("strong",[t._v("对象类型")]),t._v(". 可能会好奇, Java 不是纯面向对象的语言吗? 那保留基本类型是不是违背了这个准则? 我觉得是这样, 但是从性能方面考虑, 将一个简单的数字或字符封装成一个对象, 实在不像个好主意.")]),t._v(" "),s("h3",{attrs:{id:"基本类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[t._v("#")]),t._v(" 基本类型")]),t._v(" "),s("p",[t._v("Java 的基本类型一共八种, 表中的 "),s("code",[t._v("void")]),t._v(" 是当变量没有被赋值时的值. 基本类型不会创建对象, 而是创建一个并非是引用的「自动」变量, 直接存储「值」;")]),t._v(" "),s("p",[t._v("得益于 JVM 的底层支持, Java 的基本类型并不会像 C 那样, 在不同的设备上有不同的大小;")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("基本类型")]),t._v(" "),s("th",[t._v("默认值")]),t._v(" "),s("th",[t._v("大小")]),t._v(" "),s("th",[t._v("最小值")]),t._v(" "),s("th",[t._v("最大值")]),t._v(" "),s("th",[t._v("包装器类型")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("boolean")]),t._v(" "),s("td",[t._v("false")]),t._v(" "),s("td",[t._v("-")]),t._v(" "),s("td",[t._v("-")]),t._v(" "),s("td",[t._v("-")]),t._v(" "),s("td",[t._v("Boolean")])]),t._v(" "),s("tr",[s("td",[t._v("char")]),t._v(" "),s("td",[t._v("'\\u0000' (null)")]),t._v(" "),s("td",[t._v("16 bit")]),t._v(" "),s("td",[t._v("Unicode 0")]),t._v(" "),s("td",[t._v("Unicode 2^16 - 1")]),t._v(" "),s("td",[t._v("Character")])]),t._v(" "),s("tr",[s("td",[t._v("byte")]),t._v(" "),s("td",[t._v("(byte) 0")]),t._v(" "),s("td",[t._v("8 bit")]),t._v(" "),s("td",[t._v("-128")]),t._v(" "),s("td",[t._v("127")]),t._v(" "),s("td",[t._v("Byte")])]),t._v(" "),s("tr",[s("td",[t._v("short")]),t._v(" "),s("td",[t._v("(short) 0")]),t._v(" "),s("td",[t._v("16 bit")]),t._v(" "),s("td",[t._v("-12^15")]),t._v(" "),s("td",[t._v("2^15 - 1")]),t._v(" "),s("td",[t._v("Short")])]),t._v(" "),s("tr",[s("td",[t._v("int")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("32 bit")]),t._v(" "),s("td",[t._v("-2^31")]),t._v(" "),s("td",[t._v("2^31 - 1")]),t._v(" "),s("td",[t._v("Integer")])]),t._v(" "),s("tr",[s("td",[t._v("long")]),t._v(" "),s("td",[t._v("0L")]),t._v(" "),s("td",[t._v("64 bit")]),t._v(" "),s("td",[t._v("-2^63")]),t._v(" "),s("td",[t._v("2^63 - 1")]),t._v(" "),s("td",[t._v("Long")])]),t._v(" "),s("tr",[s("td",[t._v("float")]),t._v(" "),s("td",[t._v("0.0f")]),t._v(" "),s("td",[t._v("32 bit")]),t._v(" "),s("td",[t._v("IEEE754")]),t._v(" "),s("td",[t._v("IEEE754")]),t._v(" "),s("td",[t._v("Float")])]),t._v(" "),s("tr",[s("td",[t._v("double")]),t._v(" "),s("td",[t._v("0.0d")]),t._v(" "),s("td",[t._v("64 bit")]),t._v(" "),s("td",[t._v("IEEE754")]),t._v(" "),s("td",[t._v("IEEE754")]),t._v(" "),s("td",[t._v("Double")])]),t._v(" "),s("tr",[s("td",[t._v("void")]),t._v(" "),s("td",[t._v("-")]),t._v(" "),s("td",[t._v("-")]),t._v(" "),s("td",[t._v("-")]),t._v(" "),s("td",[t._v("-")]),t._v(" "),s("td",[t._v("-")])])])]),t._v(" "),s("h3",{attrs:{id:"对象类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象类型"}},[t._v("#")]),t._v(" 对象类型")]),t._v(" "),s("p",[t._v("Java 要求使用引用操纵对象. 这个地方, 我们看一看两个比较特殊的对象: 数组和字符串")]),t._v(" "),s("h4",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("p",[t._v("如果说 "),s("code",[t._v("String[] a")]),t._v(" 看起来还倒像即将引用一个对象, 那么 "),s("code",[t._v("int[] a")]),t._v(" 就给人感觉距离对象有些遥远了. 但是不管是哪种形式的数组, 本质上都是对象.")]),t._v(" "),s("p",[t._v("数组的创建是在运行时进行的, 所有的数组都会包含一个固定成员, 即 length , 标明数组的长度. 从另一角度来说, 数组的长度是运行时确定的, 而且不可修改; 相比之下, C11 版本之前要求数组的长度在编译时被确定, 就显得很不方便.")]),t._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化数组的两种方式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("代码中, 第二种初始化数组的方式看起来要好得多, 长得更像是创建一个数组对象.")]),t._v(" "),s("p",[t._v("Java 的数据类型分为基本类型和对象类型, 那么数组里面就可能有存在基本类型和对象引用. 如果数组元素在创建时没有被赋值, 前者将被自动赋为相应基本类型的默认值, 后者将被赋值为 "),s("code",[t._v("null")]),t._v(" .")]),t._v(" "),s("p",[t._v("对于数组拷贝, 拷贝可以有两类内容, 一是数组的引用, 二是数组对象本身. 数组引用和其他对象引用的操作一致, 而数组对象本身可以使用 "),s("code",[t._v("Array.copyOf")]),t._v(" 方法.")]),t._v(" "),s("h4",{attrs:{id:"字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),s("p",[t._v("从编译器的角度, 他偏爱共享 String 对象. 如果我们在一个程序中的两个位置分别使用了具有相同字面量的字符串, 那么就会有两个 String 类型的引用指向同一个 String 对象.")]),t._v(" "),s("p",[t._v("在 Java 中, 每当我们认为自己是在修改一个 String 对象时, 其实是在创建新的 String 对象.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("在一些情况下生成的 String 对象, 例如 "),s("code",[t._v("+")]),t._v(" "),s("code",[t._v("substring")]),t._v(" 等, 编译器是不会共享.")])]),t._v(" "),s("p",[t._v("在编译器的这种偏好下, 问题产生了: 如何比较两个 String 对象的字面量是否相同")]),t._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hel"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hel"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("上面的代码使用了 "),s("code",[t._v("equals")]),t._v(" 方法, String 类专门重写了这个方法, 将其由父类的 "),s("code",[t._v("==")]),t._v(" 对象地址比较改为值比较.")]),t._v(" "),s("p",[t._v("与 String 相关的还有一个重要的东西: "),s("code",[t._v("StringBuilder")]),t._v(" 字符串构造器. 因为每次修改一个 String 对象就会创建一个新的 String 对象. 如果有大量的字符串拼接需求, 这种方式是低效的.")]),t._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" builder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbuilder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbui1der"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" completedString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" builder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出拼接结果")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("最后的最后, 提一下"),s("strong",[t._v("码点")]),t._v("和"),s("strong",[t._v("代码单元")]),t._v(". Java 的每个字符使用 Unicode 编码."),s("br"),t._v("\nJava 中的每个字符都对应一个码点, 即一个 Unicode 的具体编码."),s("br"),t._v("\nJava 的 char 为 16bits , 这个尺寸就是 Java 代码单元的大小, 大部分的基础字符都是一个代码单元的大小, 但是有些特殊字符会占用两个代码单元.")]),t._v(" "),s("h2",{attrs:{id:"数据装-拆-箱与转型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据装-拆-箱与转型"}},[t._v("#")]),t._v(" 数据装(拆)箱与转型")]),t._v(" "),s("h3",{attrs:{id:"装-拆-箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#装-拆-箱"}},[t._v("#")]),t._v(" 装(拆)箱")]),t._v(" "),s("p",[t._v("基本类型如何与对象相互转换? JVM 支持自动打(拆)包, 在必要的时候, 将基本类型转成相应的包装器类型, 同时, 也允许将包装器类型转为基本类型.")]),t._v(" "),s("h3",{attrs:{id:"转型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转型"}},[t._v("#")]),t._v(" 转型")]),t._v(" "),s("p",[t._v("转型包括向上转型与向下转型. 在笔记一开始讨论过, 为了减小耦合, 应该尽可能地操纵基类的引用, 想办法将对象向更加抽象(向上)的方向转变; 但是, 向上转型意味着屏蔽了子类对象的一些属性或者方法, 那么在必要的时候, 还需要强制类型转换来向下转型, 保证正常的功能.")]),t._v(" "),s("p",[t._v("一般来说, 将一个对象向上转型成其基类的对象是一件比较安全的事情, Java 的继承机制允许子类对象直接代替基类对象; 但是将一个标明了是基类的对象向下转型为子类的对象, 是比较危险的, 毕竟不能无中生有.")]),t._v(" "),s("h2",{attrs:{id:"数据存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据存储"}},[t._v("#")]),t._v(" 数据存储")]),t._v(" "),s("p",[t._v("存储数据的 5 个位置")]),t._v(" "),s("ul",[s("li",[t._v("寄存器"),s("br"),t._v("\n高速存储器")]),t._v(" "),s("li",[t._v("堆栈"),s("br"),t._v("\n位于内存, 「引用」数据和「基本类型」在其中, Java 对象不在其中；\nJava 系统需要知道堆栈内所有顶的确切生命周期；")]),t._v(" "),s("li",[t._v("堆"),s("br"),t._v("\n位于内存, 一个通用内存池, 存储所有 Java 对象\n相比堆栈内的数据管理, 堆内的数据管理要灵活的多")]),t._v(" "),s("li",[t._v("常量存储"),s("br"),t._v("\n代码内部")]),t._v(" "),s("li",[t._v("非内存存储\n"),s("ul",[s("li",[t._v("流对象（网路中）")]),t._v(" "),s("li",[t._v("持久化对象（数据库中）")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("数据存储中两个非常重要的位置, 堆栈 (存储对象引用和基本类型) 和堆 (存储对象).")])])])}),[],!1,null,null,null);a.default=v.exports}}]);