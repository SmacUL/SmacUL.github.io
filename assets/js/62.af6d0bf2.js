(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{212:function(a,e,t){"use strict";t.r(e);var s=t(0),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"hibernate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hibernate"}},[a._v("#")]),a._v(" Hibernate")]),a._v(" "),t("h2",{attrs:{id:"简单的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单的使用"}},[a._v("#")]),a._v(" 简单的使用")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.w3cschool.cn/hibernate/gfhs1iep.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Hibernate 例子"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"hibernate-的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hibernate-的作用"}},[a._v("#")]),a._v(" hibernate 的作用")]),a._v(" "),t("p",[a._v("hibernate 是一种 ORM 框架的持久性框架, 对 JDBC 做了轻量的封装.")]),a._v(" "),t("h2",{attrs:{id:"hibernate-的-session-factory-与-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hibernate-的-session-factory-与-session"}},[a._v("#")]),a._v(" hibernate 的 session factory 与 session")]),a._v(" "),t("p",[a._v("Hibernate 中的 session 是用来表示应用程序和数据库的一次交互. 在一个 Session 中, 包含了一般的持久化方法（增删改查）. 此外 Session 是一个轻量级对象（线程不安全）, 每个 Session 实例和一个数据库事务绑定.")]),a._v(" "),t("p",[a._v("SessionFactory 接口负责初始化Hibernate. 它充当数据存储源的代理, 并负责创建Session对象. 这里用到了工厂模式. 需要注意的是SessionFactory并不是轻量级的, 因为一般情况下, 一个项目通常只需要一个SessionFactory就够, 当需要操作多个数据库时, 可以为每个数据库指定一个SessionFactory.")]),a._v(" "),t("h2",{attrs:{id:"transactionmanager"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#transactionmanager"}},[a._v("#")]),a._v(" TransactionManager")]),a._v(" "),t("p",[a._v("Spring 自己并没有事务管理机制, 它会提供一个 PlatformTransactionManager 的接口, 让各个平台自行实现具体的机制.  TransactionManager 就是 Hibernate 平台用于事务管理的实现.")])])}),[],!1,null,null,null);e.default=r.exports}}]);